import { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, PageBreak, TableOfContents, Footer, PageNumber, IStylesOptions } from 'docx';
import { saveAs } from 'file-saver';
import { DocumentationData } from '../types/documentation';

const A4_PAGE_OPTIONS = {
  margin: { top: 1440, right: 1440, bottom: 1440, left: 1440 }, // 1 inch = 1440 twips
};

const FONT_FAMILY = "Arial";
const HEADING_FONT_FAMILY = "Arial"; // As per spec, can be different
const CODE_FONT_FAMILY = "Consolas";

const STYLES: IStylesOptions = {
  default: {
    heading1: {
      run: { font: HEADING_FONT_FAMILY, size: 32, bold: true },
      paragraph: { spacing: { before: 480, after: 240 } },
    },
    heading2: {
      run: { font: HEADING_FONT_FAMILY, size: 28, bold: true },
      paragraph: { spacing: { before: 360, after: 180 } },
    },
    heading3: {
      run: { font: HEADING_FONT_FAMILY, size: 24, bold: true },
      paragraph: { spacing: { before: 240, after: 120 } },
    },
  },
  paragraphStyles: [
    {
      id: "normalPara",
      name: "Normal Para",
      basedOn: "Normal",
      next: "Normal",
      quickFormat: true,
      run: { font: FONT_FAMILY, size: 22 }, // 11pt
      paragraph: { spacing: { line: 331, after: 100 } }, // ~1.15 line spacing
    },
    {
      id: "codeBlock",
      name: "Code Block",
      basedOn: "Normal",
      next: "Normal",
      run: { font: CODE_FONT_FAMILY, size: 20 }, // 10pt
      paragraph: {
        spacing: { after: 200 },
        shading: { fill: "F1F1F1" },
        border: {
          top: { style: "single", size: 4, color: "auto" },
          bottom: { style: "single", size: 4, color: "auto" },
          left: { style: "single", size: 4, color: "auto" },
          right: { style: "single", size: 4, color: "auto" },
        },
      },
    },
  ],
};

const createSection = (title: string, headingLevel: HeadingLevel, ...content: (string | Paragraph)[]) => {
  const children: Paragraph[] = [
    new Paragraph({ text: title, heading: headingLevel }),
  ];

  content.forEach(item => {
    if (typeof item === 'string') {
      item.split('\n').forEach(line => {
        // Basic check for code block styling
        const style = line.startsWith('//') ? 'codeBlock' : 'normalPara';
        children.push(new Paragraph({ text: line, style }));
      });
    } else {
      children.push(item);
    }
  });

  return children;
};

export const generateWordDocument = async (data: DocumentationData) => {
  const doc = new Document({
    creator: "DocuGen AI",
    title: `Project Documentation: ${data.projectName}`,
    styles: STYLES,
    sections: [{
      properties: { page: A4_PAGE_OPTIONS },
      footers: {
        default: new Footer({
          children: [
            new Paragraph({
              alignment: AlignmentType.CENTER,
              children: [
                new TextRun({
                  children: [PageNumber.CURRENT, " / ", PageNumber.TOTAL_PAGES],
                  font: FONT_FAMILY,
                  size: 18,
                }),
              ],
            }),
          ],
        }),
      },
      children: [
        // Title Page
        new Paragraph({ text: data.projectName, heading: HeadingLevel.TITLE, alignment: AlignmentType.CENTER, spacing: { after: 200 } }),
        new Paragraph({ text: "Comprehensive Project Documentation", style: "normalPara", alignment: AlignmentType.CENTER }),
        new Paragraph({ text: `Generated by: DocuGen AI`, style: "normalPara", alignment: AlignmentType.CENTER, spacing: { after: 400 } }),
        new Paragraph({ text: `Date: ${data.generationDate}`, style: "normalPara", alignment: AlignmentType.CENTER }),
        new Paragraph({ text: `Project URL: ${data.projectUrl}`, style: "normalPara", alignment: AlignmentType.CENTER }),
        new PageBreak(),

        // Table of Contents
        new TableOfContents("Table of Contents", { hyperlink: true, headingStyleRange: "1-3" }),
        new PageBreak(),

        // Sections
        ...createSection("1. Executive Summary", HeadingLevel.HEADING_1, data.executiveSummary),
        ...createSection("2. Project Introduction", HeadingLevel.HEADING_1,
          ...createSection("2.1 Problem Statement", HeadingLevel.HEADING_2, data.projectIntroduction.problemStatement),
          ...createSection("2.2 Proposed Solution", HeadingLevel.HEADING_2, data.projectIntroduction.proposedSolution),
          ...createSection("2.3 Goals and Objectives", HeadingLevel.HEADING_2, data.projectIntroduction.goalsAndObjectives),
          ...createSection("2.4 Scope", HeadingLevel.HEADING_2, data.projectIntroduction.scope),
          ...createSection("2.5 Target Audience", HeadingLevel.HEADING_2, data.projectIntroduction.targetAudience),
        ),
        ...createSection("3. Project Methodology", HeadingLevel.HEADING_1,
          ...createSection("3.1 Development Approach", HeadingLevel.HEADING_2, data.projectMethodology.developmentApproach),
          ...createSection("3.2 Tools and Technologies", HeadingLevel.HEADING_2, data.projectMethodology.toolsAndTechnologies),
          ...createSection("3.3 Requirements Analysis", HeadingLevel.HEADING_2, data.projectMethodology.requirementsAnalysis),
        ),
        ...createSection("4. System Design and Implementation", HeadingLevel.HEADING_1,
          ...createSection("4.1 System Architecture", HeadingLevel.HEADING_2, data.systemDesign.systemArchitecture),
          ...createSection("4.2 Module Descriptions", HeadingLevel.HEADING_2, data.systemDesign.moduleDescriptions),
          ...createSection("4.3 Database Design", HeadingLevel.HEADING_2, data.systemDesign.databaseDesign),
          ...createSection("4.4 Interface Design", HeadingLevel.HEADING_2, data.systemDesign.interfaceDesign),
          ...createSection("4.5 Code Samples", HeadingLevel.HEADING_2, data.systemDesign.codeSamples),
        ),
        ...createSection("5. Testing and Results", HeadingLevel.HEADING_1,
          ...createSection("5.1 Testing Strategy", HeadingLevel.HEADING_2, data.testingAndResults.testingStrategy),
          ...createSection("5.2 Test Results", HeadingLevel.HEADING_2, data.testingAndResults.testResults),
          ...createSection("5.3 Project Accomplishments", HeadingLevel.HEADING_2, data.testingAndResults.projectAccomplishments),
        ),
        ...createSection("6. Conclusion and Future Scope", HeadingLevel.HEADING_1,
          ...createSection("6.1 Summary of Achievements", HeadingLevel.HEADING_2, data.conclusion.summaryOfAchievements),
          ...createSection("6.2 Challenges and Limitations", HeadingLevel.HEADING_2, data.conclusion.challengesAndLimitations),
          ...createSection("6.3 Future Enhancements", HeadingLevel.HEADING_2, data.conclusion.futureEnhancements),
        ),
        ...createSection("7. Appendix", HeadingLevel.HEADING_1,
          ...createSection("7.1 Code Repository", HeadingLevel.HEADING_2, data.appendix.codeRepository),
          ...createSection("7.2 References", HeadingLevel.HEADING_2, data.appendix.references),
          ...createSection("7.3 Glossary", HeadingLevel.HEADING_2, data.appendix.glossary),
        ),
      ],
    }],
  });

  const blob = await Packer.toBlob(doc);
  const formattedDate = new Date().toISOString().split('T')[0];
  const filename = `ProjectDocumentation_${data.projectName.replace(/\s+/g, '_')}_${formattedDate}.docx`;
  saveAs(blob, filename);
};
